{
  "version": 3,
  "sources": ["../keystone.ts", "../schemas/Product.ts", "../schemas/User.ts", "../schemas/index.ts"],
  "sourcesContent": ["import { config } from '@keystone-6/core';\nimport { lists } from './schemas/index';\nimport { createAuth } from '@keystone-6/auth';\nimport { statelessSessions } from '@keystone-6/core/session';\nimport path from 'path';\nimport dotenv from 'dotenv';\n\n// dotenv.config({ path: path.resolve(__dirname, '../.env') });\n\nconsole.log('Starting Keystone init...');\nconst envPath = path.resolve(__dirname, '../.env');\nconsole.log('Using env file at:', envPath);\ndotenv.config({ path: envPath });\n\nconsole.log('SESSION_SECRET is:', process.env.SESSION_SECRET);\n\nconst sessionConfig = {\n    maxAge: 60 * 60 * 24 * 30, // 30 days\n    secret: process.env.SESSION_SECRET || 'some-long-secret-value',\n};\n\nconsole.log('Creating auth config...');\n\nconst { withAuth } = createAuth({\n    listKey: 'User',\n    identityField: 'email',\n    secretField: 'password',\n    initFirstItem: {\n        fields: ['name', 'email', 'password'],\n    },\n});\n\nconsole.log('Setting up Keystone config...');\n\nexport default withAuth(\n    config({\n        db: {\n            provider: 'sqlite',\n            url: 'file:./keystone.db',\n        },\n        lists,\n        storage: {\n            localImages: {\n                kind: 'local',\n                type: 'image',\n                generateUrl: path => `/images${path}`,\n                serverRoute: {\n                    path: '/images',\n                },\n                storagePath: 'public/images',\n            },\n        },\n        session: statelessSessions(sessionConfig),\n        ui: {\n            // Restrict the Admin UI to signed-in admin users:\n            isAccessAllowed: (context) => !!context.session?.data,\n        },\n        server: {\n            port: 3001,\n            cors: {\n                origin: ['http://localhost:3000'], \n                credentials: true\n            },\n        },\n    })\n);", "import { list } from '@keystone-6/core';\nimport { text, integer, checkbox, relationship, image, float, decimal } from '@keystone-6/core/fields';\n// import { cloudinaryImage } from '@keystone-6/cloudinary';\nimport { allowAll } from '@keystone-6/core/access';\n\nexport const Product = list({\n    access: allowAll,\n    fields: {\n        name: text({ validation: { isRequired: true } }),\n        price: integer({ \n            validation: { isRequired: true },\n            defaultValue: 0,\n         }),\n        description: text({\n            ui: {\n                displayMode: 'textarea',\n            },\n        }),\n        isFeatured: checkbox({ defaultValue: false }),\n        productImage: image({\n            storage: 'localImages',\n        }),\n        // categories: relationship({\n        //     ref: 'Category.products',\n        //     many: true,\n        // }),\n    },\n    ui: {\n        listView: {\n            initialColumns: ['name', 'price', 'isFeatured'],\n            pageSize: 10,\n        }\n    }\n});", "import { list } from '@keystone-6/core';\nimport { text, password } from '@keystone-6/core/fields';\nimport { allowAll } from '@keystone-6/core/access';\n\nexport const User = list({\n    access: allowAll,\n    fields: {\n        name: text({ validation: { isRequired: true } }),\n        email: text({ isIndexed: 'unique', validation: { isRequired: true } }),\n        password: password({ validation: { isRequired: true } }),\n    },\n});", "import { Product } from './Product';\nimport { User } from './User';\n\nexport const lists = {\n    Product,\n    User,\n};"],
  "mappings": ";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAAA,eAAuB;;;ACAvB,kBAAqB;AACrB,oBAA6E;AAE7E,oBAAyB;AAElB,IAAM,cAAU,kBAAK;AAAA,EACxB,QAAQ;AAAA,EACR,QAAQ;AAAA,IACJ,UAAM,oBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IAC/C,WAAO,uBAAQ;AAAA,MACX,YAAY,EAAE,YAAY,KAAK;AAAA,MAC/B,cAAc;AAAA,IACjB,CAAC;AAAA,IACF,iBAAa,oBAAK;AAAA,MACd,IAAI;AAAA,QACA,aAAa;AAAA,MACjB;AAAA,IACJ,CAAC;AAAA,IACD,gBAAY,wBAAS,EAAE,cAAc,MAAM,CAAC;AAAA,IAC5C,kBAAc,qBAAM;AAAA,MAChB,SAAS;AAAA,IACb,CAAC;AAAA;AAAA;AAAA;AAAA;AAAA,EAKL;AAAA,EACA,IAAI;AAAA,IACA,UAAU;AAAA,MACN,gBAAgB,CAAC,QAAQ,SAAS,YAAY;AAAA,MAC9C,UAAU;AAAA,IACd;AAAA,EACJ;AACJ,CAAC;;;ACjCD,IAAAC,eAAqB;AACrB,IAAAC,iBAA+B;AAC/B,IAAAC,iBAAyB;AAElB,IAAM,WAAO,mBAAK;AAAA,EACrB,QAAQ;AAAA,EACR,QAAQ;AAAA,IACJ,UAAM,qBAAK,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IAC/C,WAAO,qBAAK,EAAE,WAAW,UAAU,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,IACrE,cAAU,yBAAS,EAAE,YAAY,EAAE,YAAY,KAAK,EAAE,CAAC;AAAA,EAC3D;AACJ,CAAC;;;ACRM,IAAM,QAAQ;AAAA,EACjB;AAAA,EACA;AACJ;;;AHJA,kBAA2B;AAC3B,qBAAkC;AAClC,kBAAiB;AACjB,oBAAmB;AAInB,QAAQ,IAAI,2BAA2B;AACvC,IAAM,UAAU,YAAAC,QAAK,QAAQ,WAAW,SAAS;AACjD,QAAQ,IAAI,sBAAsB,OAAO;AACzC,cAAAC,QAAO,OAAO,EAAE,MAAM,QAAQ,CAAC;AAE/B,QAAQ,IAAI,sBAAsB,QAAQ,IAAI,cAAc;AAE5D,IAAM,gBAAgB;AAAA,EAClB,QAAQ,KAAK,KAAK,KAAK;AAAA;AAAA,EACvB,QAAQ,QAAQ,IAAI,kBAAkB;AAC1C;AAEA,QAAQ,IAAI,yBAAyB;AAErC,IAAM,EAAE,SAAS,QAAI,wBAAW;AAAA,EAC5B,SAAS;AAAA,EACT,eAAe;AAAA,EACf,aAAa;AAAA,EACb,eAAe;AAAA,IACX,QAAQ,CAAC,QAAQ,SAAS,UAAU;AAAA,EACxC;AACJ,CAAC;AAED,QAAQ,IAAI,+BAA+B;AAE3C,IAAO,mBAAQ;AAAA,MACX,qBAAO;AAAA,IACH,IAAI;AAAA,MACA,UAAU;AAAA,MACV,KAAK;AAAA,IACT;AAAA,IACA;AAAA,IACA,SAAS;AAAA,MACL,aAAa;AAAA,QACT,MAAM;AAAA,QACN,MAAM;AAAA,QACN,aAAa,CAAAD,UAAQ,UAAUA,KAAI;AAAA,QACnC,aAAa;AAAA,UACT,MAAM;AAAA,QACV;AAAA,QACA,aAAa;AAAA,MACjB;AAAA,IACJ;AAAA,IACA,aAAS,kCAAkB,aAAa;AAAA,IACxC,IAAI;AAAA;AAAA,MAEA,iBAAiB,CAAC,YAAY,CAAC,CAAC,QAAQ,SAAS;AAAA,IACrD;AAAA,IACA,QAAQ;AAAA,MACJ,MAAM;AAAA,MACN,MAAM;AAAA,QACF,QAAQ,CAAC,uBAAuB;AAAA,QAChC,aAAa;AAAA,MACjB;AAAA,IACJ;AAAA,EACJ,CAAC;AACL;",
  "names": ["import_core", "import_core", "import_fields", "import_access", "path", "dotenv"]
}
